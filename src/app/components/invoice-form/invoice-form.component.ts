import {Component, computed, effect, inject, signal, Signal, WritableSignal} from '@angular/core';
import {Invoice} from '../../models/invoice.model';
import {PdfGeneratorService} from '../../services/pdf-generator/pdf-generator.service';
import {FormGroup, ReactiveFormsModule} from '@angular/forms';
import {InvoiceNumberService} from '../../services/invoice-number/invoice-number.service';
import {CurrencyPipe, DatePipe} from '@angular/common';
import {InvoiceFormGroupService} from '../../services/incoice-form-group/invoice-form-group.service';
import {TableModule} from "primeng/table";
import {FloatLabel} from "primeng/floatlabel";
import {Button} from "primeng/button";
import {Textarea} from "primeng/textarea";
import {InputText} from "primeng/inputtext";
import {ProductTableComponent} from "./product-table/product-table.component";

@Component({
    selector: 'app-invoice-form',
    templateUrl: './invoice-form.component.html',
    styleUrls: ['./invoice-form.component.scss'],
    imports: [
        TableModule,
        FloatLabel,
        Button,
        ReactiveFormsModule,
        Textarea,
        InputText,
        CurrencyPipe,
        ProductTableComponent
    ],
    providers: [DatePipe],
})
export class InvoiceFormComponent {
    public invoice!: WritableSignal<Invoice>;
    public autoResizeEnabled = signal(false);
    public totalNet: Signal<number> = computed(() =>
        this.invoice().items.reduce((acc, item) => acc + (item.totalPriceHt ?? 0), 0)
    );
    public totalVat: Signal<number> = computed(() =>
        this.invoice().items.reduce((acc, item) => {
            const totalHt = item.totalPriceHt ?? 0;
            const taxRate = item.taxRate ?? 0;
            return acc + totalHt * taxRate;
        }, 0)
    );
    public totalGross: Signal<number> = computed(() =>
        this.totalNet() + this.totalVat()
    );
    private readonly invoiceFormGroupService = inject(InvoiceFormGroupService);
    public formGroup = this.invoiceFormGroupService.getFormGroup();
    private readonly datePipe = inject(DatePipe);
    private readonly pdfGeneratorService = inject(PdfGeneratorService);
    private readonly invoiceNumberService = inject(InvoiceNumberService);

    constructor() {
        this.initDefaultInvoice();
        this.invoiceFormGroupService.initItems(this.invoice().items);

        if (!this.invoice().invoiceNumber) {
            const updated = {...this.invoice()};
            updated.invoiceNumber = this.invoiceNumberService.generateNextInvoiceNumber();
            this.invoice.set(updated);
            this.formGroup.get('invoiceNumber')?.setValue(updated.invoiceNumber, {emitEvent: false});
        }

        this.formGroup.valueChanges.subscribe(form => this.updateInvoiceFromForm(form));

        effect(() => {
            const current = this.invoice();
            queueMicrotask(() => {
                this.formGroup.patchValue({
                    invoiceNumber: current.invoiceNumber,
                    issueDate: current.issueDate,
                    deadline: current.deadline,
                    dueDate: current.dueDate,
                    contractNumber: current.contractNumber,
                    interventionBy: current.interventionBy,
                    note: current.note,
                    issuerName: current.issuer.name,
                    issuerAddress: current.issuer.address,
                    issuerPhone: current.issuer.phone,
                    issuerWebsite: current.issuer.website,
                    issuerEmail: current.issuer.email,
                    issuerReference: current.issuer.reference,
                    clientName: current.client.name,
                    clientAddress: current.client.address,
                    clientReference: current.client.reference
                }, {emitEvent: false});
                this.autoResizeEnabled.set(true);
            });
        });

        effect(() => {
            const dueDate = this.dueDate();
            queueMicrotask(() => {
                this.formGroup.get('dueDate')?.setValue(dueDate, {emitEvent: false});
            });
        });
    }

    public downloadPDF(): void {
        this.pdfGeneratorService.generate(this.invoice());

        if (this.isCurrentInvoiceAutoGenerated()) {
            this.invoiceNumberService.incrementCounter();
            const updated = {...this.invoice()};
            updated.invoiceNumber = this.invoiceNumberService.generateNextInvoiceNumber();
            this.invoice.set(updated);
            this.formGroup.get('invoiceNumber')?.setValue(updated.invoiceNumber, {emitEvent: false});
        }
    }

    public resetForm(): void {
        this.invoice.set({
            invoiceNumber: '',
            issueDate: '',
            deadline: 0,
            dueDate: '',
            contractNumber: '',
            client: {
                name: '',
                address: '',
                reference: ''
            },
            items: [{
                id: crypto.randomUUID(),
                type: '',
                description: '',
                period: '',
                quantity: 0,
                unitPrice: 0,
                taxRate: 0.21,
                totalPriceHt: 0
            }],
            issuer: {
                name: '',
                address: '',
                phone: '',
                website: '',
                email: '',
                reference: ''
            },
            interventionBy: '',
            note: '',
            terms: ''
        });

        this.invoiceFormGroupService.resetFormGroup();
        this.invoiceFormGroupService.initItems(this.invoice().items);
    }

    private dueDate(): string {
        const invoice = this.invoice();
        const parts = invoice.issueDate.split('/');

        if (parts.length !== 3) {
            return '';
        }

        const day = Number(parts[0]);
        const month = Number(parts[1]) - 1;
        const year = Number(parts[2]);

        const date = new Date(Date.UTC(year, month, day));
        date.setUTCDate(date.getUTCDate() + Number(invoice.deadline));

        return this.datePipe.transform(date, 'dd/MM/yyyy') ?? '';
    }


    private initDefaultInvoice(): void {
        this.invoice = signal<Invoice>({
            invoiceNumber: '',
            issueDate: this.datePipe.transform(new Date(), 'dd/MM/yyyy') ?? '',
            deadline: 30,
            dueDate: '',
            contractNumber: 'CST.2024.08.003',
            client: {
                name: 'Asitix',
                address: '1 Allée de la marque\n59290 Wasquehal',
                reference: 'Condition particulière Annexe 1 du contrat'
            },
            items: [{
                id: crypto.randomUUID(),
                type: 'Prestation',
                description: '21 jours',
                period: 'Mars 2025',
                quantity: 20,
                unitPrice: 500,
                totalPriceHt: 10000,
                taxRate: 0.21
            }],
            issuer: {
                name: 'WTZ SRL',
                address: 'Adresse de WTZ SRL',
                phone: '+33 647 10 97 00',
                reference: '',
                website: 'site-web.com',
                email: 'email@wtz.com'
            },
            interventionBy: 'Denis Wojtowicz',
            note: 'Développement Front End Angular\nAstreinte Novembre'
        });
    }

    private updateInvoiceFromForm(form: any): void {
        const updated = {...this.invoice()};
        updated.invoiceNumber = form.invoiceNumber ?? '';
        updated.issueDate = form.issueDate ?? '';
        updated.deadline = form.deadline ?? '';
        updated.dueDate = form.dueDate ?? '';
        updated.contractNumber = form.contractNumber ?? '';
        updated.interventionBy = form.interventionBy ?? '';
        updated.note = form.note ?? '';

        updated.issuer = {
            ...updated.issuer,
            name: form.issuerName ?? '',
            address: form.issuerAddress ?? '',
            phone: form.issuerPhone ?? '',
            website: form.issuerWebsite ?? '',
            email: form.issuerEmail ?? '',
            reference: form.issuerReference ?? ''
        };

        updated.client = {
            ...updated.client,
            name: form.clientName ?? '',
            address: form.clientAddress ?? '',
            reference: form.clientReference ?? ''
        };

        updated.items = form.items.map((item: any) => ({
            id: item.id,
            type: item.type,
            description: item.description,
            period: item.period,
            quantity: item.quantity,
            unitPrice: item.unitPrice,
            totalPriceHt: item.quantity * item.unitPrice,
            taxRate: item.taxRate
        }));

        this.invoice.set(updated);
    }

    private isCurrentInvoiceAutoGenerated(): boolean {
        const current = this.invoice().invoiceNumber;
        const expected = this.invoiceNumberService.generateNextInvoiceNumber();
        return current === expected;
    }
}
