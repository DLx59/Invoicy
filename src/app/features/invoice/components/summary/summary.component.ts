import {Component, inject, input, InputSignal, signal, WritableSignal} from '@angular/core';
import {Button} from "primeng/button";
import {CurrencyPipe} from "@angular/common";
import {PdfPreviewModalComponent} from "../../../../shared/components/pdf-preview-modal/pdf-preview-modal.component";
import {Invoice, Total} from '../../models/invoice.model';
import {InvoiceFormGroupService} from '../../services/incoice-form-group/invoice-form-group.service';
import {PdfGeneratorService} from '../../../../shared/pdf/pdf-generator.service';
import {InvoiceNumberService} from '../../services/invoice-number/invoice-number.service';

@Component({
  selector: 'app-summary',
  imports: [
    Button,
    CurrencyPipe,
    PdfPreviewModalComponent
  ],
  templateUrl: './summary.component.html',
  styleUrl: './summary.component.scss'
})
export class SummaryComponent {
  public invoice: InputSignal<Invoice> = input.required<Invoice>();
  public total: InputSignal<Total> = input.required<Total>();
  public pdfSrc: WritableSignal<Blob | string> = signal('');
  public showPdfPreviewModal = signal(false);
  private readonly invoiceFormGroupService = inject(InvoiceFormGroupService);
  public formGroup = this.invoiceFormGroupService.getFormGroup();
  private readonly pdfGeneratorService = inject(PdfGeneratorService);
  private readonly invoiceNumberService = inject(InvoiceNumberService);

  public downloadPDF() {
    this.pdfGeneratorService.download(this.invoice());

    // if (this.isCurrentInvoiceAutoGenerated()) {
    //   this.invoiceNumberService.incrementCounter();
    //   const updated = {...this.invoice()};
    //   updated.invoiceNumber = this.invoiceNumberService.generateNextInvoiceNumber();
    //   this.invoice.set(updated);
    //   this.formGroup.get('invoiceNumber')?.setValue(updated.invoiceNumber, {emitEvent: false});
    // }
  }

  public async vizualisePDF(): Promise<void> {
    try {
      const blob = await this.pdfGeneratorService.getBlob(this.invoice());
      this.pdfSrc.set(URL.createObjectURL(blob));
      this.showPdfPreviewModal.set(true);
    } catch (error) {
      console.error('Erreur de génération PDF', error);
    }
  }

  public refreshPdfDialogState(event: boolean) {
    this.showPdfPreviewModal.set(event);
  }

  private isCurrentInvoiceAutoGenerated(): boolean {
    const current = this.invoice().invoiceNumber;
    const expected = this.invoiceNumberService.generateNextInvoiceNumber();
    return current === expected;
  }
}
